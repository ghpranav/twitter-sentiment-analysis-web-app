{"version":3,"sources":["loading_bar.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","axios","require","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitHandler","setState","progressBar","submitted","positive","negative","neutral","self","assertThisInitialized","get","params","text","state","hashtag","then","response","data","series","e","console","log","hashtag_desc","desc","tweets","results","inputHandler","target","value","showAnalysis","react_default","a","createElement","class","react_apexcharts_min_default","options","type","width","showLoadingBar","src","alt","colors","labels","plotOptions","pie","donut","show","setInterval","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","_this2","stop","_callee2","_context2","renderTweets","map","item","i","color","label","key","username","style","margin-top","id","aria-describedby","placeholder","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d65d9f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading_bar.25ef2804.gif\";","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\nconst axios = require(\"axios\");\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      hashtag: \"\",\r\n      submitted: false,\r\n      progressBar: false,\r\n      options: {\r\n        colors: [\"#F7464A\", \"#46BFBD\", \"#FDB45C\"],\r\n        labels: [\"Negative\", \"Positive\", \"Neutral\"],\r\n        plotOptions: {\r\n          pie: {\r\n            donut: {\r\n              labels: {\r\n                show: true,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      series: [44, 55, 41],\r\n      tweets: [],\r\n      hashtag_desc: \"\",\r\n    };\r\n  }\r\n\r\n  async componentDidUpdate() {\r\n    var positive = 0;\r\n    var negative = 0;\r\n    var neutral = 0;\r\n    var self = this;\r\n    try {\r\n      setInterval(async () => {\r\n        axios\r\n          .get(\"http://localhost:8000/analyzehashtag\", {\r\n            params: {\r\n              text: this.state.hashtag,\r\n            },\r\n          })\r\n          .then(function (response) {\r\n            negative = response.data.negative;\r\n            positive = response.data.positive;\r\n            neutral = response.data.neutral;\r\n            self.setState({ submitted: true });\r\n            self.setState({ series: [negative, positive, neutral] });\r\n          });\r\n      }, 30000);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n\r\n    try {\r\n      setInterval(async () => {\r\n        axios\r\n          .get(\"http://localhost:8000/gettweets\", {\r\n            params: {\r\n              text: this.state.hashtag,\r\n            },\r\n          })\r\n          .then(function (response) {\r\n            console.log(response);\r\n            self.setState({ tweets: response.data.results });\r\n          });\r\n      }, 30000);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  submitHandler = () => {\r\n    this.setState({ progressBar: true });\r\n    this.setState({ submitted: false });\r\n    var positive = 0;\r\n    var negative = 0;\r\n    var neutral = 0;\r\n    var self = this;\r\n    try {\r\n      axios\r\n        .get(\"http://localhost:8000/analyzehashtag\", {\r\n          params: {\r\n            text: this.state.hashtag,\r\n          },\r\n        })\r\n        .then(function (response) {\r\n          negative = response.data.negative;\r\n          positive = response.data.positive;\r\n          neutral = response.data.neutral;\r\n          self.setState({ submitted: true });\r\n          self.setState({ progressBar: false });\r\n          self.setState({ series: [negative, positive, neutral] });\r\n        });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n\r\n    try {\r\n      axios\r\n        .get(\"http://localhost:8000/getwiki\", {\r\n          params: {\r\n            text: this.state.hashtag,\r\n          },\r\n        })\r\n        .then(function (response) {\r\n          self.setState({ hashtag_desc: response.data.desc });\r\n        });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n\r\n    try {\r\n      axios\r\n        .get(\"http://localhost:8000/gettweets\", {\r\n          params: {\r\n            text: this.state.hashtag,\r\n          },\r\n        })\r\n        .then(function (response) {\r\n          self.setState({ tweets: response.data.results });\r\n        });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  inputHandler = (e) => {\r\n    this.setState({ hashtag: e.target.value });\r\n  };\r\n\r\n  showAnalysis = () => {\r\n    if (this.state.submitted === true) {\r\n      return (\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-4\">\r\n            <Chart\r\n              options={this.state.options}\r\n              series={this.state.series}\r\n              type=\"donut\"\r\n              width=\"420\"\r\n            />\r\n          </div>\r\n          <div class=\"offset-sm-1 col-sm-7\">\r\n            <h1 class=\"heading_desc\">{this.state.hashtag_desc}</h1>\r\n            <br />\r\n            <br />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  showLoadingBar = () => {\r\n    if (this.state.progressBar) {\r\n      return (\r\n        <div class=\"text-center\">\r\n          <img\r\n            src={require(\"./loading_bar.gif\")}\r\n            width=\"50\"\r\n            alt=\"Loading Bar\"\r\n          />\r\n          <h2 class=\"progressheader\">Please Wait</h2>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    var renderTweets = this.state.tweets.map(function (item, i) {\r\n      var color = \"#46BFBD\";\r\n\r\n      if (item.label === \"Neutral\") {\r\n        color = \"#FDB45C\";\r\n      }\r\n      if (item.label === \"Negative\") {\r\n        color = \"#F7464A\";\r\n      }\r\n      return (\r\n        <div key={i} class=\"tweets\">\r\n          <h2>@{item.username}</h2>\r\n          <p>{item.text}</p>\r\n          <h3 style={{ color: color }}>Predicted Sentiment - {item.label}</h3>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <div class=\"container\">\r\n          <h1\r\n            class=\"display-4 text-center\"\r\n            style={{ \"margin-top\": this.state.submitted ? \"5%\" : \"30%\" }}\r\n          >\r\n            Twitter Sentiment Analysis\r\n          </h1>\r\n          <br />\r\n          <br />\r\n          <div class=\"input-group mb-3\">\r\n            <div class=\"input-group-prepend\">\r\n              <span class=\"input-group-text hashtag-icon\" id=\"basic-addon1\">\r\n                #\r\n              </span>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control hashtag\"\r\n              id=\"basic-url\"\r\n              aria-describedby=\"basic-addon3\"\r\n              placeholder=\"Enter Hashtag to analyze\"\r\n              onChange={this.inputHandler}\r\n            />\r\n          </div>\r\n          <br />\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <div class=\"text-center\">\r\n                <button\r\n                  class=\"btn text-center btn-outline-secondary submit\"\r\n                  type=\"button\"\r\n                  onClick={this.submitHandler}\r\n                >\r\n                  Analyze\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <br />\r\n          {this.showAnalysis()}\r\n          {this.state.submitted ? renderTweets : <br />}\r\n          {this.showLoadingBar()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}