{"version":3,"sources":["loading_bar.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","axios","require","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitHandler","setState","progressBar","submitted","positive","negative","neutral","self","assertThisInitialized","get","params","text","state","hashtag","then","response","data","series","e","console","log","url","hashtag_desc","tweets","results","inputHandler","target","value","showAnalysis","react_default","a","createElement","class","react_apexcharts_min_default","options","type","width","showLoadingBar","src","colors","labels","plotOptions","pie","donut","show","setInterval","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","_this2","stop","_callee2","_context2","renderTweets","map","item","i","color","label","key","username","style","margin-top","id","aria-describedby","placeholder","onChange","onClick","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4NCIlCC,EAAQC,EAAQ,IAqMPC,GApMGD,EAAQ,gBAGtB,SAAAC,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA+DJI,cAAgB,WACZP,EAAKQ,SAAS,CAACC,aAAa,IAC5BT,EAAKQ,SAAS,CAACE,WAAW,IAC1B,IAAIC,EAAW,EACXC,EAAW,EACXC,EAAU,EACVC,EAAIb,OAAAc,EAAA,EAAAd,CAAAD,GACR,IACEH,EAAMmB,IAAI,uCAAwC,CAC9CC,OAAQ,CACJC,KAAMlB,EAAKmB,MAAMC,WAEtBC,KAAK,SAASC,GACbV,EAAWU,EAASC,KAAKX,SACzBD,EAAWW,EAASC,KAAKZ,SACzBE,EAAUS,EAASC,KAAKV,QACxBC,EAAKN,SAAS,CAACE,WAAW,IAC1BI,EAAKN,SAAS,CAACC,aAAa,IAC5BK,EAAKN,SAAS,CAACgB,OAAQ,CAACZ,EAAUD,EAAUE,OAE9C,MAAMY,GACNC,QAAQC,IAAIF,GAGhB,IACA,IAAIG,EAAM,wEAA0E5B,EAAKmB,MAAMC,QAAU,uBACvGvB,EAAMmB,IAAIY,GAAKP,KAAK,SAASC,GACzBR,EAAKN,SAAS,CAACqB,aAAcP,EAASC,KAAK,GAAG,OAEhD,MAAME,GACNC,QAAQC,IAAIF,GAGhB,IACE5B,EAAMmB,IAAI,kCAAmC,CACzCC,OAAQ,CACJC,KAAMlB,EAAKmB,MAAMC,WAEtBC,KAAK,SAASC,GACbR,EAAKN,SAAS,CAACsB,OAAQR,EAASC,KAAKQ,YAEvC,MAAMN,GACNC,QAAQC,IAAIF,KA1GPzB,EA+GbgC,aAAe,SAACP,GACZzB,EAAKQ,SAAS,CAACY,QAASK,EAAEQ,OAAOC,SAhHxBlC,EAmHbmC,aAAe,WACX,GAA2B,GAAxBnC,EAAKmB,MAAMT,UACV,OACI0B,EAAAC,EAAAC,cAAA,OAAKC,MAAM,OACXH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,YACPH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAOI,QAASzC,EAAKmB,MAAMsB,QAASjB,OAAQxB,EAAKmB,MAAMK,OAAQkB,KAAK,QAAQC,MAAM,SAEtFP,EAAAC,EAAAC,cAAA,OAAKC,MAAM,wBACXH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,gBAAgBvC,EAAKmB,MAAMU,cACrCO,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,cA5HLtC,EAmIb4C,eAAiB,WACb,GAAG5C,EAAKmB,MAAMV,YACV,OACI2B,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eACPH,EAAAC,EAAAC,cAAA,OAAKO,IAAK/C,EAAQ,IAAsB6C,MAAM,OAC9CP,EAAAC,EAAAC,cAAA,MAAIC,MAAM,kBAAV,iBAtIZvC,EAAKmB,MAAQ,CACTC,QAAS,GACTV,WAAW,EACXD,aAAa,EACbgC,QAAS,CACLK,OAAQ,CAAC,UAAW,UAAW,WAC/BC,OAAQ,CAAC,WAAY,WAAY,WACjCC,YAAa,CACbC,IAAK,CACHC,MAAO,CACLH,OAAQ,CACNI,MAAM,OAMhB3B,OAAQ,CAAC,GAAI,GAAI,IACjBM,OAAQ,GACRD,aAAc,IArBT7B,+MA0BPW,EAAW,EACTC,EAAW,EACXC,EAAU,EACVC,EAAOX,KACX,IACEiD,YAAWnD,OAAAoD,EAAA,EAAApD,CAAAqD,EAAAjB,EAAAkB,KAAC,SAAAC,IAAA,OAAAF,EAAAjB,EAAAoB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACZ/D,EAAMmB,IAAI,uCAAwC,CAC9CC,OAAQ,CACJC,KAAM2C,EAAK1C,MAAMC,WAEtBC,KAAK,SAASC,GACbV,EAAWU,EAASC,KAAKX,SACzBD,EAAWW,EAASC,KAAKZ,SACzBE,EAAUS,EAASC,KAAKV,QACxBC,EAAKN,SAAS,CAACE,WAAW,IAC1BI,EAAKN,SAAS,CAACgB,OAAQ,CAACZ,EAAUD,EAAUE,OAVpC,wBAAA6C,EAAAI,SAAAN,MAYL,KACL,MAAM/B,GACNC,QAAQC,IAAIF,GAGhB,IACE2B,YAAWnD,OAAAoD,EAAA,EAAApD,CAAAqD,EAAAjB,EAAAkB,KAAC,SAAAQ,IAAA,OAAAT,EAAAjB,EAAAoB,KAAA,SAAAO,GAAA,cAAAA,EAAAL,KAAAK,EAAAJ,MAAA,OACZ/D,EAAMmB,IAAI,kCAAmC,CACzCC,OAAQ,CACJC,KAAM2C,EAAK1C,MAAMC,WAEtBC,KAAK,SAASC,GACbI,QAAQC,IAAIL,GACZR,EAAKN,SAAS,CAACsB,OAAQR,EAASC,KAAKQ,YAP7B,wBAAAiC,EAAAF,SAAAC,MASL,KACL,MAAMtC,GACNC,QAAQC,IAAIF,sIAoFhB,IAAIwC,EAAe9D,KAAKgB,MAAMW,OAAOoC,IAAI,SAASC,EAAMC,GACpD,IAAIC,EAAQ,UAQV,MANe,WAAdF,EAAKG,QACJD,EAAQ,WAEK,YAAdF,EAAKG,QACJD,EAAQ,WAGJjC,EAAAC,EAAAC,cAAA,OAAKiC,IAAKH,EAAG7B,MAAM,UACnBH,EAAAC,EAAAC,cAAA,cAAM6B,EAAKK,UACXpC,EAAAC,EAAAC,cAAA,SAAI6B,EAAKjD,MACTkB,EAAAC,EAAAC,cAAA,MAAImC,MAAO,CAACJ,MAASA,IAArB,yBAAoDF,EAAKG,UAK3E,OACIlC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACPH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,wBAAwBkC,MAAO,CAACC,aAAavE,KAAKgB,MAAMT,UAAU,KAAK,QAAjF,8BACA0B,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,oBACVH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,uBACRH,EAAAC,EAAAC,cAAA,QAAMC,MAAM,gCAAgCoC,GAAG,gBAA/C,MAEFvC,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOH,MAAM,uBAAuBoC,GAAG,YAAYC,mBAAiB,eAAeC,YAAY,2BAA2BC,SAAU3E,KAAK6B,gBAEzJI,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,OACPH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eACTH,EAAAC,EAAAC,cAAA,UAAQC,MAAM,+CAA+CG,KAAK,SAASqC,QAAS5E,KAAKI,eAAzF,cAIN6B,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACjBnC,KAAKgC,eACPhC,KAAKgB,MAAMT,UAAUuD,EAAa7B,EAAAC,EAAAC,cAAA,WAChCnC,KAAKyC,kBAEZR,EAAAC,EAAAC,cAAA,OAAKC,MAAM,kBACPH,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,MAAIC,MAAM,cAAckC,MAAO,CAACJ,MAAS,aAAtD,sBAA0FjC,EAAAC,EAAAC,cAAA,KAAG0C,KAAK,oCAAR,UAA1F,cA5LIC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzE,KAAK,SAAA0E,GACjCA,EAAaC","file":"static/js/main.90a937b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading_bar.25ef2804.gif\";","import React, { Component } from \"react\";\r\nimport './App.css';\r\nimport Chart from 'react-apexcharts'\r\n\r\nconst axios = require('axios');\r\nvar ProgressBar = require('progressbar.js');\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            hashtag: \"\",\r\n            submitted: false,\r\n            progressBar: false,\r\n            options: {\r\n                colors: ['#F7464A', '#46BFBD', '#FDB45C'],\r\n                labels: ['Negative', 'Positive', 'Neutral'],\r\n                plotOptions: {\r\n                pie: {\r\n                  donut: {\r\n                    labels: {\r\n                      show: true\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            series: [44, 55, 41],\r\n            tweets: [],\r\n            hashtag_desc: \"\"\r\n        }\r\n    }\r\n    \r\n    async componentDidUpdate() {\r\n      var positive = 0\r\n        var negative = 0\r\n        var neutral = 0\r\n        var self = this;\r\n        try {        \r\n          setInterval(async () => {\r\n          axios.get('http://localhost:8000/analyzehashtag', {\r\n              params: {\r\n                  text: this.state.hashtag\r\n              }\r\n          }).then(function(response) {\r\n              negative = response.data.negative\r\n              positive = response.data.positive\r\n              neutral = response.data.neutral\r\n              self.setState({submitted: true});\r\n              self.setState({series: [negative, positive, neutral]});\r\n          });\r\n              }, 30000);\r\n          } catch(e) {\r\n            console.log(e);\r\n          }\r\n        \r\n        try {        \r\n          setInterval(async () => {\r\n          axios.get('http://localhost:8000/gettweets', {\r\n              params: {\r\n                  text: this.state.hashtag\r\n              }\r\n          }).then(function(response) {\r\n              console.log(response);\r\n              self.setState({tweets: response.data.results});\r\n          });\r\n              }, 30000);\r\n          } catch(e) {\r\n            console.log(e);\r\n          }\r\n      }\r\n    \r\n    submitHandler = () => {\r\n        this.setState({progressBar: true});\r\n        this.setState({submitted: false});\r\n        var positive = 0\r\n        var negative = 0\r\n        var neutral = 0\r\n        var self = this;\r\n        try {        \r\n          axios.get('http://localhost:8000/analyzehashtag', {\r\n              params: {\r\n                  text: this.state.hashtag\r\n              }\r\n          }).then(function(response) {\r\n              negative = response.data.negative\r\n              positive = response.data.positive\r\n              neutral = response.data.neutral\r\n              self.setState({submitted: true});\r\n              self.setState({progressBar: false});\r\n              self.setState({series: [negative, positive, neutral]});\r\n          });\r\n          } catch(e) {\r\n            console.log(e);\r\n          }\r\n        \r\n        try {        \r\n        var url = \"https://en.wikipedia.org/w/api.php?origin=*&action=opensearch&search=\" + this.state.hashtag + \"&limit=1&format=json\"\r\n          axios.get(url).then(function(response) {\r\n              self.setState({hashtag_desc: response.data[2][0]});\r\n          });\r\n          } catch(e) {\r\n            console.log(e);\r\n          }\r\n        \r\n        try {        \r\n          axios.get('http://localhost:8000/gettweets', {\r\n              params: {\r\n                  text: this.state.hashtag\r\n              }\r\n          }).then(function(response) {\r\n              self.setState({tweets: response.data.results});\r\n          });\r\n          } catch(e) {\r\n            console.log(e);\r\n          }\r\n        \r\n    }\r\n    \r\n    inputHandler = (e) => {\r\n        this.setState({hashtag: e.target.value});\r\n    }\r\n    \r\n    showAnalysis = () => {\r\n        if(this.state.submitted == true){\r\n            return(\r\n                <div class=\"row\">\r\n                <div class=\"col-sm-4\">\r\n                    <Chart options={this.state.options} series={this.state.series} type=\"donut\" width=\"420\" />\r\n                </div>\r\n                <div class=\"offset-sm-1 col-sm-7\">\r\n                <h1 class=\"heading_desc\">{this.state.hashtag_desc}</h1>\r\n                <br /><br />\r\n                </div>\r\n                </div>  \r\n            );\r\n        }\r\n    }\r\n    \r\n    showLoadingBar = () => {\r\n        if(this.state.progressBar){\r\n            return(\r\n                <div class=\"text-center\">\r\n                    <img src={require('./loading_bar.gif')} width=\"50\"/>\r\n                    <h2 class=\"progressheader\">Please Wait</h2>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n        \r\n    render() {\r\n        \r\n        var renderTweets = this.state.tweets.map(function(item, i){\r\n            var color = \"#46BFBD\";\r\n            \r\n            if(item.label == \"Neutral\"){\r\n                color = \"#FDB45C\";\r\n            }\r\n            if(item.label == \"Negative\"){\r\n                color = \"#F7464A\";\r\n            }\r\n              return (\r\n                    <div key={i} class=\"tweets\">\r\n                    <h2>@{item.username}</h2>\r\n                    <p>{item.text}</p>\r\n                    <h3 style={{\"color\": color}}>Predicted Sentiment - {item.label}</h3>\r\n                    </div>\r\n                  );\r\n            })\r\n        \r\n  return (\r\n      <div>\r\n          <div class=\"container\">\r\n              <h1 class=\"display-4 text-center\" style={{'margin-top':this.state.submitted?'5%':'30%'}}>Twitter Sentiment Analysis</h1>\r\n              <br /><br />\r\n                <div class=\"input-group mb-3\">\r\n                 <div class=\"input-group-prepend\">\r\n                    <span class=\"input-group-text hashtag-icon\" id=\"basic-addon1\">#</span>\r\n                  </div>\r\n                  <input type=\"text\" class=\"form-control hashtag\" id=\"basic-url\" aria-describedby=\"basic-addon3\" placeholder=\"Enter Hashtag to analyze\" onChange={this.inputHandler}/>\r\n              </div>\r\n              <br />\r\n              <div class=\"row\">\r\n                  <div class=\"col-sm-12\">\r\n                    <div class=\"text-center\">\r\n                      <button class=\"btn text-center btn-outline-secondary submit\" type=\"button\" onClick={this.submitHandler}>Analyze</button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <br /><br /><br /><br />\r\n                {this.showAnalysis()}\r\n              {this.state.submitted?renderTweets:<br />}\r\n                {this.showLoadingBar()}\r\n          </div>\r\n          <div class=\"footer my-auto\">\r\n              <p>Made with <h1 class=\"fa fa-heart\" style={{\"color\": \"#00aced\"}}></h1> by Rohit Agrawal (<a href=\"https://github.com/agrawal-rohit\">Github</a>)</p>\r\n          </div>\r\n      </div>\r\n  );\r\n}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}